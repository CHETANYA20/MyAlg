package projecteuler1;

/**
 * Created by yuantian on 7/29/14.
 */

/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7'th triangle number would be 1+2+3+4+5+6+7=28. The first ten terms would be:

1,3,6,10,15,21,28,36,45,55,...

Let us list the factors of the first seven triangle numbers:

1:1
3:1,3
6:1,2,3,6
10:1,2,5,10
15:1,3,5,15
21:1,3,7,21
28:1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over N divisors?

Input
First line T, the number of testcases. Each testcase consists of N in one line.

Output
For each testcase, print the required answer in one line.

Constraints
1≤T≤10
1≤N≤103

Sample input

4
1
2
3
4
Sample output

3
6
6
28
*/

import java.util.*;
import java.io.*;

/*
    How many divisors does a number have?
    http://mathschallenge.net/library/number/number_of_divisors
 */
public class HighlyDivisibleTriangularNumber {
    static void go() {
        int[] res = new int[2000];

        int count = 1, i = 0;
        while (count < 1000) {
            i++;
            count = 1;
            int x = i * (i + 1) / 2;
            int pow = 0;
            // calculate how many 2s
            while ((x & 1) == 0) {
                pow++;
                x >>= 1;
            }
            count *= pow + 1;

            // calculate how many factors greater than 2
            // just to make it faster, because we can use
            // f += 2
            int f = 3;
            while (x >= f) {
                pow = 0;
                while (x % f == 0) {
                    pow++;
                    x /= f;
                }
                count *= pow + 1;
                f += 2;
            }

            // store the result to table.
            // any slot which is less than "count" and
            // current value is 0 should be overwritten.
            // stop, if there is a non-zero value
            int end = count;
            x = i * (i + 1) / 2;
            while (--end > 0 && res[end] == 0) {
                res[end] = x;
            }
        }

        int t = in.nextInt();
        while (t-- > 0) {
            out.println(res[in.nextInt()]);
        }
    }

    static InputReader in;
    static PrintWriter out;

    public static void main(String[] args) {
        in = new InputReader(System.in);
        out = new PrintWriter(System.out);

        go();

        out.close();
    }

    static class InputReader {
        private InputStream stream;
        private byte[] buf = new byte[1024];
        private int curChar;
        private int numChars;

        public InputReader(InputStream stream) {
            this.stream = stream;
        }

        public int read() {
            if (numChars == -1)
                throw new InputMismatchException();
            if (curChar >= numChars) {
                curChar = 0;
                try {
                    numChars = stream.read(buf);
                } catch (IOException e) {
                    throw new InputMismatchException();
                }
                if (numChars <= 0)
                    return -1;
            }
            return buf[curChar++];
        }

        public int nextInt() {
            return (int) nextLong();
        }

        public long nextLong() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            int sgn = 1;
            if (c == '-') {
                sgn = -1;
                c = read();
            }
            long res = 0;
            do {
                if (c < '0' || c > '9')
                    throw new InputMismatchException();
                res *= 10;
                res += c - '0';
                c = read();
            } while (!isSpaceChar(c));
            return res * sgn;
        }

        public String nextString() {
            int c = read();
            while (isSpaceChar(c))
                c = read();
            StringBuilder sb = new StringBuilder(1024);
            do {
                sb.append((char) c);
                c = read();
            } while (!isSpaceChar(c));
            return sb.toString();
        }

        public static boolean isSpaceChar(int c) {
            switch (c) {
                case -1:
                case ' ':
                case '\n':
                case '\r':
                case '\t':
                    return true;
                default:
                    return false;
            }
        }
    }
}